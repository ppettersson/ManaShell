=== The Development Plan ===

0.1	[done]	UI in a presentable state.
0.2	[done]	Piped process with both input and output.
0.3	[done]	Source editor.
0.4	[done]	PDB plugin: http://docs.python.org/3.3/library/pdb.html

0.5	[todo]	GDB Command Line plugin: https://sourceware.org/gdb/current/onlinedocs/gdb/
			- Not using the Machine Interpreter mode (that would be a separate plugin).
			- Stack based state + Command queue?
			- Make each command it's own class?
			- Very basic gdb debugging.
				- Stepping (over, in, out)
					- Issue with tail calling and updating the callstack.
				- Continue
					- "Program received signal SIGTRAP, Trace/breakpoint trap. <func> at <path:line>"
				- UserBreak / Stop
					- Issue with premature program exit.
					- Empty command queue / stack for expected output?
				- Breakpoints
					- Should only be added/removed after confirmation from the debugger,
						not be UI driven like they are right now.
				- Watches
					- Different output formats.
				- Intercept user input

			Bugs:
				- gdb won't accept absolute paths.
				- Source Editor has underlines when it shouldn't.
					- Probably something to do with SetSyntaxCpp

0.6	[todo]	UI polish.
			- More plugin-ish:
				- Automatically enumerate all enabled debuggers.
					- Help->Name+URL
					- Debug->Start...->Populate a notebook page

			- Highlight current line in the source editor.
			- Keyboard shortcuts.
				- configurable.
			- Toolbar bitmaps.
			- Save/Load perspectives.
			- Console.
				- Tabs - one console per process.
				- Separate output for debugger and process?
				- Local toolbar:
					- Clear all.
					- Word wrap.
					- Save as...
			- Menu.
				- disable unavailable options.
					- Tools.
			- Options.
				- Persistent on disc.
			- Callstack.
				- Option to toggle:
					- return type.
					- argument values.
					- argument names.
					- argument types.
				- Popup menu with filename and line number.
					- Editable if in DryRun mode.
			- Breakpoints.
				- Option to strip away path when displaying.
				- Option to add breakpoints in files without path.
				- Remember the last dir in the file browser dialog.
			- Source editor:
				- Open file.
				- Goto line.
				- Find.
				- Markers are positioned wrong horizontally.
				- Code folding.
				- Only center the cursor when stepping.
				- Automatically figure out syntax highlighting from files that
					start with "#! /usr/bin/python" or similar.
				- Options:
					- font size.
					- tab / spaces.
			- Start Debugger Dialog:
				- all options should be persistent.
					- editable dropdown with recent items.
				- merge with attach.
			- Frames should have a minimum size when floating.
			- About dialog:
				- List of contributors (alphabetical).
				- License: BSD 2 clause - include URL?
				- URL to project homepage - github.

			Bugs:
				- debugger dialog:
					- File selector should also offer the "All files option".
				- Notebook:
					- It no longer loads any file where the path isn't correct.
				- Command history:
					- It's no longer possible to send empty strings (to repeat last command).


0.7	[todo]	JDB plugin: http://docs.oracle.com/javase/1.3/docs/tooldocs/solaris/jdb.html
			- Very basic java debugging.

0.8	[todo]	Port.
			- Upgrade to wxWidgets 3.x
			- Linux.
			- OSX.
			- Windows.
			- Icon.
			- Installers.
			- Clean up code and add more comments.

0.9	[todo]	Write docs.
			- License (BSD 2 clause).
			- Installing.
				- Building from source.
			- Tutorials.
				- Debugging a python script.
				- Debugging an Android NDK sample, both java and native.
			- Reference.
			- Troubleshooting.

1.0	[todo]	Beta.
			- Create a project homepage.
				- Overview.
				- Downloads.
				- Bugtracker.
				- Forum.
			- Release tag for master branch.

1.0.x		Final.


=== Wishlist for Future versions ===

- Multiple debuggers running at the same time:
	- Android - both gdb and jdb.
	- Several processes - chromium.

- Tools:
	- logcat viewer with filters.
	- debug image viewer (extract code from wxImageView, then remove that repository).
		- directly from memory (gdb memory).
		- additional API for external programs?
	- Post mortem dry-run.
		- import callstack from text
			- given at least one source directory, grep to find matching file:line pairs.
				- configurable format, with scanf: %s|%d
		- edit manually
			- add / remove / edit frame.
- Plugins:
	- gdb/mi
	- lldb
	- make: http://www.cmcrossroads.com/article/interactive-gnu-make-debugger
	- bash: http://bashdb.sourceforge.net
- Optional project view:
	- Make it easier to find files when setting breakpoints.
		- Add folder.
		- Add nested hierarchy: Include/Exclude of folders and filetypes.
		- Optionally remember them across debug settings.
	- Find and open file (fuzzy search).
- Optional build system:
	- Call Makefile.
	- Parse gcc output and present it nicely.
		- Fold away compile arguments (includes, defines etc).
		- Jump to error/warning.
			- Fold away callstack.
	- Parse javac output.

- PDB: Add missing features:
	- Moving in callstack should change stack frame in the debugger, not just UI.
		- Selecting, just UI.
		- Double clicking, change frame and UI.
	- ToolTip highlight of selected expression.
	- Locals?
	- More advanced breakpoints with conditions etc.
	- Run to cursor.
	- Set next statement.
	- Restart with current breakpoints and watches.
	- Support more user inputs.

- UI:
	- wxWidgets doesn't support the Break keyboard shortcut.
	  Want to use Ctrl+Alt+Break for breaking the debugger, but can't.

=== Known Bugs ===

- Text input stream in piped process assumes the output from the inferior
  process is unicode when it's really ascii. Investigate if it's our bug,
  a wx bug or maybe a Windows bug.
- Crash on shutdown if a process is running.
